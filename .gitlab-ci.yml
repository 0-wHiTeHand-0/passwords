stages:
  - compiling
  - assembling
  - testing
  - signing
  - packaging
  - publishing

image: passwords-builder

Compile:
  stage: compiling
  script:
    - npm ci
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then npm run build:stable ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then npm run build:testing ; fi
  artifacts:
    paths:
      - ./src/js/Static/*
      - ./src/l10n/*
      - ./src/css/*

Assemble:
  stage: assembling
  script:
    - mkdir passwords
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then sed -i -e "s/-BUILD//g" ./src/appinfo/info.xml ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then sed -i -e "s/-BUILD/-build${CI_PIPELINE_ID}/g" ./src/appinfo/info.xml ; fi
    - rsync -r --exclude="vue" --exclude="js" --exclude="scss" src/* passwords
    - rsync -r src/js/Static passwords/js/
    - cp CHANGELOG.md passwords/
  artifacts:
    paths:
      - ./passwords
      
Assemble Legacy Support Release:
  stage: assembling
  script:
    - mkdir passwords-lsr
    - mv src/lib/AppInfo/SystemRequirementsLSR.php src/lib/AppInfo/SystemRequirements.php
    - npm run rector
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then sed -i -e "s/-BUILD/lsr/g" ./src/appinfo/info.xml ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then sed -i -e "s/-BUILD/-build${CI_PIPELINE_ID}lsr/g" ./src/appinfo/info.xml ; fi
    - sed -i -e "0,/<name>Passwords</ s/<name>Passwords</<name>Passwords (Legacy Support Release)</g" ./src/appinfo/info.xml
    - sed -i -e "s/php min-version=\"7.4\" max-version=\"8.0\"/php min-version=\"7.3\" max-version=\"7.3\"/g" ./src/appinfo/info.xml
    - sed -i -e "s/nextcloud min-version=\"20.0.5\"/nextcloud min-version=\"20\"/g" ./src/appinfo/info.xml
    - rsync -r --exclude="vue" --exclude="js" --exclude="scss" src/* passwords-lsr
    - rsync -r src/js/Static passwords-lsr/js/
    - cp CHANGELOG.md passwords-lsr/
  artifacts:
    paths:
      - ./passwords-lsr

PHPUnit:
  stage: testing
  script:
    - npm run phpunit
  artifacts:
    paths:
      - ./passwords
      - ./passwords-lsr

Sign:
  stage: signing
  script:
    - echo "-----BEGIN PRIVATE KEY-----" > sign.key
    - echo $SIGN_KEY | tr " " "\n" >> sign.key
    - echo "-----END PRIVATE KEY-----" >> sign.key
    - echo "-----BEGIN CERTIFICATE-----" > sign.crt
    - echo $SIGN_CRT | tr " " "\n" >> sign.crt
    - echo "-----END CERTIFICATE-----" >> sign.crt
    - /usr/src/nextcloud/occ integrity:sign-app --path=$(pwd)/passwords --privateKey=$(pwd)/sign.key --certificate=$(pwd)/sign.crt
    - /usr/src/nextcloud/occ integrity:sign-app --path=$(pwd)/passwords-lsr --privateKey=$(pwd)/sign.key --certificate=$(pwd)/sign.crt
    - rm sign.key sign.crt
  artifacts:
    paths:
      - ./passwords
      - ./passwords-lsr
  only:
    - testing
    - stable

Pack:
  stage: packaging
  script:
    - tar -zcf passwords.tar.gz passwords
    - tar -zcf passwords-lsr.tar.gz passwords-lsr --transform s/passwords-lsr/passwords/
    - echo "export JOB_ID=\"${CI_JOB_ID}\"" > job.id
  artifacts:
    paths:
      - ./passwords.tar.gz
      - ./passwords-lsr.tar.gz
      - job.id
  only:
  - testing
  - stable

Publish Nightly:
  stage: publishing
  script:
    - source job.id
    - echo "-----BEGIN PRIVATE KEY-----" > sign.key
    - echo $SIGN_KEY | tr " " "\n" >> sign.key
    - echo "-----END PRIVATE KEY-----" >> sign.key
    - SIGNATURE=$(openssl dgst -sha512 -sign ./sign.key ./passwords.tar.gz | openssl base64 | tr -d "\n")
    - rm sign.key
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords.tar.gz\",\"signature\":\"${SIGNATURE}\",\"nightly\":true}"'
  environment:
    name: Testing
  only:
  - testing

Publish Stable:
  stage: publishing
  script:
    - source job.id
    - echo "-----BEGIN PRIVATE KEY-----" > sign.key
    - echo $SIGN_KEY | tr " " "\n" >> sign.key
    - echo "-----END PRIVATE KEY-----" >> sign.key
    - SIGNATURE=$(openssl dgst -sha512 -sign ./sign.key ./passwords.tar.gz | openssl base64 | tr -d "\n")
    - LSR_SIGNATURE=$(openssl dgst -sha512 -sign ./sign.key ./passwords-lsr.tar.gz | openssl base64 | tr -d "\n")
    - rm sign.key
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords-lsr.tar.gz\",\"signature\":\"${LSR_SIGNATURE}\",\"nightly\":false}"'
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords.tar.gz\",\"signature\":\"${SIGNATURE}\",\"nightly\":false}"'
  environment:
    name: Stable
  only:
  - stable