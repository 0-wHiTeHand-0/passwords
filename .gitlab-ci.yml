stages:
  - compiling
  - assembling
  - testing
  - signing
  - packaging
  - publishing
  - hooks

image: passwords-builder

Compile:
  stage: compiling
  script:
    - npm ci
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then npm run build:stable ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then npm run build:testing ; fi
  artifacts:
    paths:
      - ./src/js/Static/*
      - ./src/l10n/*
      - ./src/css/*

Assemble:
  stage: assembling
  script:
    - mkdir passwords
    - rm src/appinfo/info-lsr.xml src/lib/AppInfo/SystemRequirementsLSR.php
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then php scripts/set-version.php ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then php scripts/set-version.php --nightly --build "${CI_PIPELINE_ID}" ; fi
    - rsync -r --exclude="vue" --exclude="js" --exclude="scss" src/* passwords
    - rsync -r src/js/Static passwords/js/
    - cp CHANGELOG.md passwords/
  artifacts:
    paths:
      - ./passwords
      
Assemble Legacy Support Release:
  stage: assembling
  script:
    - mkdir passwords-lsr
    - mv src/appinfo/info-lsr.xml src/appinfo/info.xml
    - mv src/lib/AppInfo/SystemRequirementsLSR.php src/lib/AppInfo/SystemRequirements.php
    - npm run rector
    - if [ "${CI_COMMIT_REF_NAME}" == "stable" ] ; then php scripts/set-version.php --lsr ; fi
    - if [ "${CI_COMMIT_REF_NAME}" != "stable" ] ; then php scripts/set-version.php --lsr --nightly --build "${CI_PIPELINE_ID}" ; fi
    - rsync -r --exclude="vue" --exclude="js" --exclude="scss" src/* passwords-lsr
    - rsync -r src/js/Static passwords-lsr/js/
    - cp CHANGELOG.md passwords-lsr/
  artifacts:
    paths:
      - ./passwords-lsr

PHPUnit:
  stage: testing
  script:
    - npm run phpunit
  artifacts:
    paths:
      - ./passwords
      - ./passwords-lsr

Sign:
  stage: signing
  script:
    - /usr/src/nextcloud/occ integrity:sign-app --path=$(pwd)/passwords --privateKey=${SIGN_KEY} --certificate=${SIGN_CRT}
    - /usr/src/nextcloud/occ integrity:sign-app --path=$(pwd)/passwords-lsr --privateKey=${SIGN_KEY} --certificate=${SIGN_CRT}
  artifacts:
    paths:
      - ./passwords
      - ./passwords-lsr
  only:
    - testing
    - stable

Pack:
  stage: packaging
  script:
    - tar -zcf passwords.tar.gz passwords
    - tar -zcf passwords-lsr.tar.gz passwords-lsr --transform s/passwords-lsr/passwords/
    - echo "export JOB_ID=\"${CI_JOB_ID}\"" > job.id
  artifacts:
    paths:
      - ./passwords.tar.gz
      - ./passwords-lsr.tar.gz
      - job.id
  only:
  - testing
  - stable

Publish Nightly:
  stage: publishing
  script:
    - source job.id
    - SIGNATURE=$(openssl dgst -sha512 -sign ${SIGN_KEY} ./passwords.tar.gz | openssl base64 | tr -d "\n")
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords.tar.gz\",\"signature\":\"${SIGNATURE}\",\"nightly\":true}"'
  environment:
    name: Testing
  only:
  - testing

Publish Stable:
  stage: publishing
  script:
    - source job.id
    - SIGNATURE=$(openssl dgst -sha512 -sign ${SIGN_KEY} ./passwords.tar.gz | openssl base64 | tr -d "\n")
    - LSR_SIGNATURE=$(openssl dgst -sha512 -sign ${SIGN_KEY} ./passwords-lsr.tar.gz | openssl base64 | tr -d "\n")
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords-lsr.tar.gz\",\"signature\":\"${LSR_SIGNATURE}\",\"nightly\":false}"'
    - 'curl -f -X POST ${API_URL} -H "Authorization: Token ${API_TOKEN}" -H "Content-Type: application/json" -d "{\"download\":\"${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/raw/passwords.tar.gz\",\"signature\":\"${SIGNATURE}\",\"nightly\":false}"'
  environment:
    name: Stable
  only:
  - stable

Update Handbook:
  stage: hooks
  script:
    - mkdir -p ~/.ssh/ && cp ${HANDBOOK_PUBLISH_KEY} ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519
    - export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
    - APP_VERSION=$(node -p "require('./package.json').version")
    - git clone --branch ${CI_COMMIT_REF_NAME} ${HANDBOOK_REPOSITORY} passwords-handbook
    - cd passwords-handbook
    - CURRENT_VERSION=$(node -p "require('./package.json').version")
    - if [ "${CURRENT_VERSION}" == "${APP_VERSION}" ] ; then exit 0 ; fi
    - 'sed -i -e "s|${CURRENT_VERSION}|${APP_VERSION}|g" ./package.json'
    - git config --global user.name "Gitlab CI"
    - git config --global user.email "gitlab@git.mdns.eu"
    - git commit -am "Raise version"
    - git push origin
    - echo "Raised version from ${CURRENT_VERSION} to ${NEW_VERSION}"
  only:
  - testing
  - stable